# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ua1wsmFToganQBq-KjwVZkrRg6hqfGp-
"""

import streamlit as st 
import altair as alt
#import plotly.express as px
import tweepy as tw
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from PIL import Image
import seaborn as sns
from datetime import datetime
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.pipeline import Pipeline


consumer_key= '****************'
consumer_secret= '*************'
access_token= '****************'
access_token_secret= '*******************'
auth = tw.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tw.API(auth, wait_on_rate_limit=True)



def app():



    st.title("Emotion analysis for tweet replies for a twitter account")


    st.subheader("Analyze how policies and new communications from your account/organization are being received")

    st.subheader("This is how this application works :")

    st.write("1. You will enter the username of the organization/ individual to whom you want to analyse the replies they received")
    st.write("2. It will then Fetch the 50 most recent tweet replies")
    st.write("3. It will Perform Sentiment Analysis and then display the emotions identified in those replies in a bar graph")





    mentioned_account = st.text_area("Enter the exact twitter handle of the user account without the @: ")
    search_var = "to:", mentioned_account
    date_since = "2018-11-16"




    #st.markdown("<--------     Also Do checkout the another cool tool from the sidebar")

        #Analyzer_choice = st.selectbox("Select the Activities",  ["Show Recent Tweets","Generate WordCloud" ,"Visualize the Sentiment Analysis"])


    if st.button("Analyze"):



        def Plot_Analysis():

            st.success("Generating Visualisation for Sentiment Analysis")

            tweets = tw.Cursor(api.search, q=search_var, lang="en",since=date_since).items(50)
            tweets_text = [[tweet.text] for tweet in tweets]
            global tweet_text
            tweet_text= pd.DataFrame(data = tweets_text, columns=["text"])



            # function to clean the tweets
            def tweets_cleaner(text):
                text = re.sub('@[A-Za-z0â€“9]+', '', text)  # Removing @mentions
                text = re.sub('#', '', text) # Removing '#' hash tag
                text = re.sub('RT[\s]+', '', text) # Removing RT
                text = re.sub('https?:\/\/\S+', '', text) # Removing hyperlink

                return text


            # Cleaning the tweets
            tweet_text['text'] = tweet_text['text'].apply(tweets_cleaner)



            def get_emotion_analysis(tweet_text):
                emotions_df = pd.read_csv("emotions_dataset.csv")
                emotions_df.fillna('', inplace=True)
                x_features = emotions_df['Clean_Text']
                y_labels = emotions_df['Emotion']
                x_train, x_val, y_train, y_val = train_test_split(x_features, y_labels, test_size=0.3, random_state=42)
                log_regr_pl = Pipeline(steps=[('cv', CountVectorizer()), ('lr', LogisticRegression())])
                log_regr_pl.fit(x_train, y_train)
                tweet_text['emotions_pred'] = log_regr_pl.predict(tweet_text['text'])

            return tweet_text



        

        tweet_text= Plot_Analysis()



        st.write(sns.countplot(x=tweet_text["emotions_pred"],data= tweet_text))


        st.pyplot(use_container_width=True)




    st.subheader(' ------------------------Created By Nadia')


if __name__ == "__main__":
    app()
